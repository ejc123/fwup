#!/bin/sh

#
# Test writing an MBR that doesn't have all 4 entries. The missing
# ones should be filled in with 0s.
#

. "$(cd "$(dirname "$0")" && pwd)/common.sh"

cat >$CONFIG <<EOF
define(BOOT_PART_OFFSET, 63)
define(BOOT_PART_COUNT, 77238)

mbr mbr-a {
    partition 0 {
        block-offset = \${BOOT_PART_OFFSET}
        block-count = \${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
}
task complete {
	on-init {
                mbr_write(mbr-a)
                fat_mkfs(\${BOOT_PART_OFFSET}, \${BOOT_PART_COUNT})
                fat_setlabel(\${BOOT_PART_OFFSET}, "TESTLABL")
        }
}
EOF

# Create the firmware file, then "burn it"
$FWUP_CREATE -c -f $CONFIG -o $FWFILE
$FWUP_APPLY -a -d $IMGFILE -i $FWFILE -t complete

EXPECTED_OUTPUT=$WORK/expected.out
ACTUAL_OUTPUT=$WORK/actual.out

cat >$EXPECTED_OUTPUT << EOF
 Volume in drive : is TESTLABL
 Volume Serial Number is 0022-2DB6
Directory for ::/

No files
                         38 910 464 bytes free

EOF

LC_ALL= mdir -i $WORK/fwup.img@@32256 > $ACTUAL_OUTPUT
diff -w $EXPECTED_OUTPUT $ACTUAL_OUTPUT

# IMPORTANT: The volume label is actually supposed to be stored twice. Once in
# the FAT header and onces as a special file in the root directory.  FatFS only
# writes the special file. Dosfstools 4.2 checks this now and will fail. Since
# everything "seems" to work with the way that FatFS chose, comment out the
# fsck below so that the test doesn't fail.

# Check the FAT file format using fsck
#dd if=$WORK/fwup.img skip=63 of=$WORK/vfat.img
#$FSCK_FAT $WORK/vfat.img

# Check that the verify logic works on this file
$FWUP_VERIFY -V -i $FWFILE
