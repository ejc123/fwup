#!/bin/sh

#
# Test the GPT creation ability of fwup but with a partial 128KB segment at end
#
# This is the same as 163_gpt.test except with a search/replace of 65536 with
# 65504.
#

. "$(cd "$(dirname "$0")" && pwd)/common.sh"

cat >$CONFIG <<EOF
define(EFI_TYPE, "c12a7328-f81f-11d2-ba4b-00a0c93ec93b")
define(LINUX_TYPE, "44479540-f297-41b2-9af7-d131d5f0458a")

define(DISK_UUID, "b443fbeb-2c93-481b-88b3-0ecb0aeba911")
define(EFI_PART_UUID, "5278721d-0089-4768-85df-b8f1b97e6684")
define(ROOTFS_PART_UUID, "fcc205c8-2f1c-4dcd-bef4-7b209aa15cca")

define(EFI_PART_OFFSET, 64)
define(EFI_PART_COUNT, 32768)
define-eval(ROOTFS_PART_OFFSET, "\${EFI_PART_OFFSET} + \${EFI_PART_COUNT}")
define(ROOTFS_PART_COUNT, 65504)

gpt gpt-a {
    guid = \${DISK_UUID}

    partition 0 {
        block-offset = \${EFI_PART_OFFSET}
        block-count = \${EFI_PART_COUNT}
        type = \${EFI_TYPE}
        guid = \${EFI_PART_UUID}
        name = "efi-part.vfat"
    }
    partition 1 {
        block-offset = \${ROOTFS_PART_OFFSET}
        block-count = \${ROOTFS_PART_COUNT}
        type = \${LINUX_TYPE}
        guid = \${ROOTFS_PART_UUID}
        name = "rootfs.ext2"
    }
}
task complete {
	on-init {
                gpt_write(gpt-a)
        }
}
EOF

# Create the expected output from sfdisk by running ./198_gpt_partial-generate.sh on
# Linux.
base64_decodez >$WORK/expected-primary-gpt.img <<EOF
H4sIAAAAAAAAA+3SzyuDcRzA8c+zcnFQOzmgPSkl+dFcFc8TM0tKi9suO2zZyXq2WCk9Bwq3Jamd
OM4RBxyUnYwcppz9ASuxFEU9vuq7A7fHQdT79e1bn8/316dPfUXwnwXkwfM8Q0W2a/i+PX8QmYyZ
s3Z8TsSQhFrpKS63f+4032q+2q1zU+f1t/Hj7f6OqY2jtuvWejkY0PuunuFaJfuzjvCbenN9F6HX
2+DZtOxVR6sjXU4hvikL0fX7k6fT1fSapc+NuV/vpSQtGRmQrCTFkbwMypJaSarIH2snOrHbOLRL
L7Xw3WNk67Kl8t45dDNz/rxilvYTV5auG/r2ux1ZVCOvauZU7ZQUVDzsv30AAAAAAAAAAAAAAAAA
AAAAAAAAAAAA+DM+AHVn3/EAQgAA
EOF
base64_decodez >$WORK/expected-secondary-gpt.img <<EOF
H4sIAAAAAAAAA+3bPUsDQRSF4ZNCBAshtUpWqyB+EFtBd9EYRQQJlmlSbNDKsAkSEGQLBbUVEbbS
0lYt1EIwlVEsIlj7A9KoCApaOOJYpIyFWLzPMMydC8NhfsBNlvovE2938fNZ7dfGaqM9QSW7pcXM
xsPp09laYd3Vt/FQTXwVtKRBFZVXoLKGtGI6eVO1xt3NTO49H3nRaz11/5jevmqrfnQP385dvKw6
0UHu2rW5iTDW9C7Qslllk1ky2b4qph5pMRsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgP8iPTXjzHvZ
BSmmnLn7yfboq+/Zefufqfs+ezq233ifONkZ6JrePO686WgcxnttP7Q7Va8W/+oP+L1PgzKlBABC
AAA=
EOF
cp $WORK/expected-primary-gpt.img $WORK/expected.img
dd if=$WORK/expected-secondary-gpt.img of=$WORK/expected.img bs=512 seek=98337 conv=notrunc

# Create the firmware file, then "burn it"
$FWUP_CREATE -c -f $CONFIG -o $FWFILE
$FWUP_APPLY -a -d $IMGFILE -i $FWFILE -t complete --max-size=98370

cmp $WORK/expected.img $IMGFILE

# Check that the verify logic works on this file
$FWUP_VERIFY -V -i $FWFILE
